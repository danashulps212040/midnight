#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script de configura√ß√£o e migra√ß√£o do banco de dados para PlanetScale
Este script deve ser executado ap√≥s configurar as vari√°veis de ambiente
"""

import os
import sys
from pathlib import Path

# Adicionar o diret√≥rio atual ao path para imports
sys.path.append(str(Path(__file__).parent))

def configurar_ambiente():
    """Configura as vari√°veis de ambiente necess√°rias"""
    print("üîß Configurando ambiente...")
    
    # Verificar se arquivo .env existe
    env_file = Path('.env')
    if not env_file.exists():
        print("‚ö†Ô∏è  Arquivo .env n√£o encontrado. Usando vari√°veis de ambiente do sistema.")
    else:
        # Carregar vari√°veis do arquivo .env se existir
        try:
            from dotenv import load_dotenv
            load_dotenv()
            print("‚úÖ Arquivo .env carregado com sucesso")
        except ImportError:
            print("‚ö†Ô∏è  python-dotenv n√£o instalado. Usando apenas vari√°veis do sistema.")
    
    # Verificar vari√°veis necess√°rias
    required_vars = [
        'PLANETSCALE_HOST',
        'PLANETSCALE_USERNAME', 
        'PLANETSCALE_PASSWORD',
        'PLANETSCALE_DATABASE'
    ]
    
    missing_vars = []
    for var in required_vars:
        if not os.getenv(var):
            missing_vars.append(var)
    
    if missing_vars:
        print(f"‚ùå ERRO: Vari√°veis de ambiente n√£o configuradas: {', '.join(missing_vars)}")
        print("\nüìã Configure as seguintes vari√°veis:")
        for var in missing_vars:
            print(f"   export {var}=valor_aqui")
        return False
    
    print("‚úÖ Todas as vari√°veis de ambiente est√£o configuradas")
    return True

def testar_conexao():
    """Testa a conex√£o com o banco de dados"""
    print("\nüîå Testando conex√£o com PlanetScale...")
    
    try:
        # Importar usando o database.py modificado
        from database_cloud import Database
        
        # Tentar conectar
        db = Database()
        
        # Testar conex√£o
        resultado = db.testar_conexao()
        
        if 'erro' in resultado:
            print(f"‚ùå Erro na conex√£o: {resultado['erro']}")
            return False
        
        print("‚úÖ Conex√£o com PlanetScale estabelecida com sucesso!")
        
        # Listar tabelas para verificar
        tabelas_result = db.verificar_tabelas()
        if 'tabelas' in tabelas_result:
            print(f"üìä Tabelas encontradas: {len(tabelas_result['tabelas'])}")
            for tabela in tabelas_result['tabelas']:
                print(f"   - {tabela}")
        
        db.close()
        return True
        
    except ImportError as e:
        print(f"‚ùå Erro ao importar m√≥dulos: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Erro inesperado: {e}")
        return False

def executar_migracao():
    """Executa a migra√ß√£o do banco de dados"""
    print("\nüì¶ Executando migra√ß√£o do banco de dados...")
    
    try:
        import mysql.connector
        from mysql.connector import Error
        
        # Configura√ß√£o de conex√£o
        config = {
            'host': os.getenv('PLANETSCALE_HOST'),
            'user': os.getenv('PLANETSCALE_USERNAME'),
            'password': os.getenv('PLANETSCALE_PASSWORD'),
            'database': os.getenv('PLANETSCALE_DATABASE'),
            'port': int(os.getenv('PLANETSCALE_PORT', 3306)),
            'ssl_disabled': False,
            'autocommit': True
        }
        
        # Conectar e executar migra√ß√£o
        connection = mysql.connector.connect(**config)
        cursor = connection.cursor()
        
        # Ler arquivo de migra√ß√£o
        migration_file = Path('planetscale_migration.sql')
        if not migration_file.exists():
            print("‚ùå Arquivo planetscale_migration.sql n√£o encontrado")
            return False
        
        # Executar migra√ß√£o
        with open(migration_file, 'r', encoding='utf-8') as f:
            migration_sql = f.read()
        
        # Dividir em comandos individuais (removendo coment√°rios)
        commands = []
        for line in migration_sql.split('\n'):
            line = line.strip()
            if line and not line.startswith('--'):
                commands.append(line)
        
        sql_script = ' '.join(commands)
        
        # Executar comandos SQL
        for statement in sql_script.split(';'):
            statement = statement.strip()
            if statement:
                try:
                    cursor.execute(statement)
                    print(f"‚úÖ Executado: {statement[:50]}...")
                except Error as e:
                    # Ignorar erros de "table already exists"
                    if "already exists" in str(e).lower():
                        print(f"‚ö†Ô∏è  Tabela j√° existe: {statement[:50]}...")
                    else:
                        print(f"‚ùå Erro SQL: {e}")
                        print(f"   Statement: {statement}")
        
        cursor.close()
        connection.close()
        
        print("‚úÖ Migra√ß√£o executada com sucesso!")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro durante migra√ß√£o: {e}")
        return False

def main():
    """Fun√ß√£o principal"""
    print("üöÄ CONFIGURA√á√ÉO PLANETSCALE + RENDER")
    print("=" * 50)
    
    # Etapa 1: Configurar ambiente
    if not configurar_ambiente():
        sys.exit(1)
    
    # Etapa 2: Testar conex√£o
    if not testar_conexao():
        print("\nüí° DICA: Verifique suas credenciais do PlanetScale")
        sys.exit(1)
    
    # Etapa 3: Executar migra√ß√£o
    response = input("\n‚ùì Deseja executar a migra√ß√£o do banco? (s/N): ")
    if response.lower() in ['s', 'sim', 'y', 'yes']:
        if not executar_migracao():
            sys.exit(1)
    
    print("\nüéâ CONFIGURA√á√ÉO CONCLU√çDA!")
    print("=" * 50)
    print("‚úÖ Banco de dados configurado e pronto para uso")
    print("‚úÖ Aplica√ß√£o pronta para deploy no Render")
    print("\nüìã PR√ìXIMOS PASSOS:")
    print("1. Fazer upload do c√≥digo para GitHub usando o uploader")
    print("2. Criar servi√ßo no Render conectado ao reposit√≥rio")
    print("3. Configurar as vari√°veis de ambiente no Render")
    print("4. Fazer o deploy!")

if __name__ == "__main__":
    main()