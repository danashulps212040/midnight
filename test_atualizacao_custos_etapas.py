#!/usr/bin/env python3
"""
Script para testar a atualiza√ß√£o dos custos das etapas quando o pre√ßo √© atualizado
"""

import requests
import json
from database import Database

def testar_atualizacao_custos_etapas():
    """
    Testa se os custos das etapas s√£o atualizados corretamente na tabela produtos_etapas
    """
    try:
        produto_id = 41
        
        print("üß™ Teste de Atualiza√ß√£o de Custos das Etapas")
        print("=" * 60)
        
        # 1. Verificar estado inicial
        print("1Ô∏è‚É£ Verificando estado inicial...")
        db = Database()
        
        # Buscar custo atual das etapas na tabela
        query_etapas_antes = """
            SELECT pe.id, pe.nome, pe.custo_estimado, pe.tempo_estimado, pe.equipamento_id,
                   m.hora_maquina, m.nome as maquina_nome
            FROM produtos_etapas pe
            LEFT JOIN maquinas m ON pe.equipamento_id = m.id AND pe.equipamento_tipo = 'maquina'
            WHERE pe.produto_id = %s
        """
        db.cursor.execute(query_etapas_antes, (produto_id,))
        etapas_antes = db.cursor.fetchall()
        
        print(f"üìã Etapas antes da atualiza√ß√£o:")
        for etapa in etapas_antes:
            print(f"  - {etapa['nome']}: R$ {float(etapa['custo_estimado'] or 0):.2f}")
            print(f"    M√°quina: {etapa['maquina_nome']} (R$ {float(etapa['hora_maquina'] or 0):.2f}/h)")
            print(f"    Tempo: {etapa['tempo_estimado']}")
        
        # Buscar pre√ßo atual do produto
        query_produto = "SELECT preco FROM produtos WHERE id = %s"
        db.cursor.execute(query_produto, (produto_id,))
        resultado = db.cursor.fetchone()
        preco_atual = float(resultado['preco']) if resultado else 0
        print(f"üí∞ Pre√ßo atual do produto: R$ {preco_atual:.2f}")
        
        db.close()
        
        # 2. Simular atualiza√ß√£o de pre√ßos via API
        print("\n2Ô∏è‚É£ Simulando atualiza√ß√£o de pre√ßos...")
        
        # Calcular novo pre√ßo (exemplo: R$ 328.32 conforme seu cen√°rio)
        novo_preco = 328.32
        
        # Dados para simular atualiza√ß√£o de pre√ßos
        dados_atualizacao = {
            "produtos": [
                {
                    "id": produto_id,
                    "preco_anterior": preco_atual,
                    "novo_preco": novo_preco
                }
            ]
        }
        
        # Chamar API de atualiza√ß√£o
        url_atualizacao = 'http://localhost:8000/api/produtos/atualizar-precos'
        response = requests.post(
            url_atualizacao,
            headers={'Content-Type': 'application/json'},
            data=json.dumps(dados_atualizacao)
        )
        
        print(f"üì° Resposta da API de atualiza√ß√£o: {response.status_code}")
        if response.status_code == 200:
            resposta = response.json()
            print(f"‚úÖ {resposta.get('atualizados', 0)} produto(s) atualizado(s)")
            if resposta.get('erros'):
                print(f"‚ùå Erros: {resposta['erros']}")
        else:
            print(f"‚ùå Erro na atualiza√ß√£o: {response.text}")
            return
        
        # 3. Verificar estado ap√≥s atualiza√ß√£o
        print("\n3Ô∏è‚É£ Verificando estado ap√≥s atualiza√ß√£o...")
        
        db = Database()
        
        # Buscar custos das etapas ap√≥s atualiza√ß√£o
        db.cursor.execute(query_etapas_antes, (produto_id,))
        etapas_depois = db.cursor.fetchall()
        
        print(f"üìã Etapas ap√≥s a atualiza√ß√£o:")
        for etapa in etapas_depois:
            print(f"  - {etapa['nome']}: R$ {float(etapa['custo_estimado'] or 0):.2f}")
            print(f"    M√°quina: {etapa['maquina_nome']} (R$ {float(etapa['hora_maquina'] or 0):.2f}/h)")
            print(f"    Tempo: {etapa['tempo_estimado']}")
        
        # Verificar se pre√ßo do produto foi atualizado
        db.cursor.execute(query_produto, (produto_id,))
        resultado = db.cursor.fetchone()
        preco_final = float(resultado['preco']) if resultado else 0
        print(f"üí∞ Pre√ßo final do produto: R$ {preco_final:.2f}")
        
        db.close()
        
        # 4. Comparar resultados
        print("\n4Ô∏è‚É£ An√°lise dos resultados:")
        print("=" * 40)
        
        custos_mudaram = False
        for antes, depois in zip(etapas_antes, etapas_depois):
            custo_antes = float(antes['custo_estimado'] or 0)
            custo_depois = float(depois['custo_estimado'] or 0)
            
            if abs(custo_antes - custo_depois) > 0.01:  # Diferen√ßa significativa
                print(f"‚úÖ Etapa '{antes['nome']}': R$ {custo_antes:.2f} ‚Üí R$ {custo_depois:.2f}")
                custos_mudaram = True
            else:
                print(f"‚ö†Ô∏è Etapa '{antes['nome']}': R$ {custo_antes:.2f} (n√£o alterado)")
        
        if abs(preco_atual - preco_final) > 0.01:
            print(f"‚úÖ Pre√ßo do produto: R$ {preco_atual:.2f} ‚Üí R$ {preco_final:.2f}")
        else:
            print(f"‚ö†Ô∏è Pre√ßo do produto: R$ {preco_atual:.2f} (n√£o alterado)")
        
        print("\n" + "=" * 60)
        if custos_mudaram:
            print("‚úÖ SUCESSO: Os custos das etapas foram atualizados na tabela produtos_etapas!")
        else:
            print("‚ùå PROBLEMA: Os custos das etapas N√ÉO foram atualizados na tabela produtos_etapas!")
        
    except Exception as e:
        print(f"‚ùå Erro durante o teste: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    testar_atualizacao_custos_etapas()
