#!/usr/bin/env python3
"""
Teste espec√≠fico para verificar se altera√ß√µes no custo por hora de m√°quinas
est√£o sendo detectadas corretamente pelo sistema.
"""

import requests
import json
from database import Database
from datetime import datetime, timedelta

def testar_deteccao_alteracao_maquina():
    """
    Teste isolado de detec√ß√£o de altera√ß√£o em m√°quina espec√≠fica
    """
    print("=== TESTE DE DETEC√á√ÉO DE ALTERA√á√ÉO EM M√ÅQUINA ===\n")
    
    try:
        db = Database()
        
        # 1. Escolher uma m√°quina espec√≠fica para teste
        print("1. Selecionando m√°quina para teste:")
        
        query_maquina = """
            SELECT m.id, m.nome, m.hora_maquina, m.data_atualizacao,
                   COUNT(pe.produto_id) as produtos_usando
            FROM maquinas m
            LEFT JOIN produtos_etapas pe ON m.id = pe.equipamento_id 
                                         AND pe.equipamento_tipo = 'maquina'
            WHERE m.hora_maquina > 0
            GROUP BY m.id, m.nome, m.hora_maquina, m.data_atualizacao
            HAVING produtos_usando > 0
            ORDER BY produtos_usando DESC
            LIMIT 1
        """
        
        db.cursor.execute(query_maquina)
        maquina = db.cursor.fetchone()
        
        if not maquina:
            print("‚ùå Nenhuma m√°quina encontrada com produtos associados!")
            return
        
        print(f"   ‚úÖ M√°quina selecionada: {maquina['nome']} (ID: {maquina['id']})")
        print(f"   üí∞ Custo atual: R$ {maquina['hora_maquina']}/hora")
        print(f"   üì¶ Produtos usando: {maquina['produtos_usando']}")
        print(f"   üìÖ √öltima atualiza√ß√£o: {maquina['data_atualizacao']}")
        
        # 2. Verificar produtos que usam esta m√°quina
        print("\n2. Produtos que usam esta m√°quina:")
        
        query_produtos = """
            SELECT DISTINCT p.id, p.nome, p.preco, p.margem_lucro,
                   pe.tempo_estimado, pe.custo_estimado
            FROM produtos p
            INNER JOIN produtos_etapas pe ON p.id = pe.produto_id
            WHERE pe.equipamento_id = %s AND pe.equipamento_tipo = 'maquina'
            LIMIT 3
        """
        
        db.cursor.execute(query_produtos, (maquina['id'],))
        produtos = db.cursor.fetchall()
        
        for produto in produtos:
            print(f"   - {produto['nome']} (ID: {produto['id']})")
            print(f"     Pre√ßo atual: R$ {produto['preco']}")
            print(f"     Tempo na m√°quina: {produto['tempo_estimado']}")
            print(f"     Custo etapa: R$ {produto['custo_estimado']}")
        
        # 3. Simular altera√ß√£o de pre√ßo na m√°quina
        print(f"\n3. Simulando altera√ß√£o no custo da m√°quina:")
        
        custo_atual = float(maquina['hora_maquina'])
        custo_novo = round(custo_atual * 1.10, 2)  # Aumento de 10%
        
        print(f"   Custo anterior: R$ {custo_atual}/hora")
        print(f"   Custo novo: R$ {custo_novo}/hora")
        print(f"   Varia√ß√£o: +{((custo_novo - custo_atual) / custo_atual * 100):.2f}%")
        
        # 4. Testar detec√ß√£o via API de simula√ß√£o
        print("\n4. Testando detec√ß√£o via API:")
        
        response = requests.get('http://localhost:8000/api/produtos/simular-mudancas')
        
        if response.status_code == 200:
            data = response.json()
            
            produtos_afetados = data.get('produtos_afetados', [])
            maquinas_alteradas = data.get('maquinas_alteradas', [])
            
            # Verificar se maquinas_alteradas √© um inteiro (contagem) ou lista
            if isinstance(maquinas_alteradas, int):
                count_maquinas = maquinas_alteradas
                maquinas_alteradas = []
            else:
                count_maquinas = len(maquinas_alteradas) if maquinas_alteradas else 0
            
            print(f"   ‚úÖ API respondeu com sucesso!")
            print(f"   üìä Produtos afetados: {len(produtos_afetados)}")
            print(f"   ‚öôÔ∏è M√°quinas alteradas: {count_maquinas}")
            
            # Debug: mostrar estrutura completa da resposta
            print(f"   üîç Debug - estrutura da resposta:")
            for key, value in data.items():
                if key != 'produtos_afetados':
                    print(f"     {key}: {value} (tipo: {type(value)})")
            
            # Verificar se nossa m√°quina est√° nas altera√ß√µes
            maquina_encontrada = False
            if maquinas_alteradas:  # Se for lista
                for maq_alt in maquinas_alteradas:
                    if maq_alt.get('id') == maquina['id']:
                        maquina_encontrada = True
                        print(f"   ‚úÖ M√°quina {maquina['nome']} encontrada nas altera√ß√µes!")
                        print(f"   üí∞ Custo simulado: R$ {maq_alt['custo_por_hora']}/hora")
                        break
            
            if not maquina_encontrada:
                print(f"   ‚ö†Ô∏è M√°quina {maquina['nome']} N√ÉO foi inclu√≠da nas altera√ß√µes")
            
            # Verificar se produtos afetados incluem os que usam nossa m√°quina
            produtos_encontrados = 0
            for produto_id in [p['id'] for p in produtos]:
                for prod_afetado in produtos_afetados:
                    if prod_afetado['id'] == produto_id:
                        produtos_encontrados += 1
                        print(f"   ‚úÖ Produto {prod_afetado['nome']} detectado como afetado!")
                        print(f"     Pre√ßo: R$ {prod_afetado['preco_atual']:.2f} ‚Üí R$ {prod_afetado['novo_preco']:.2f}")
                        print(f"     Varia√ß√£o: {prod_afetado['variacao_percentual']:.2f}%")
                        break
            
            print(f"   üì¶ Produtos detectados: {produtos_encontrados}/{len(produtos)}")
            
        else:
            print(f"   ‚ùå Erro na API: {response.status_code}")
            print(f"   üìÑ Resposta: {response.text}")
        
        # 5. Testar detec√ß√£o via verifica√ß√£o de altera√ß√µes reais
        print("\n5. Testando verifica√ß√£o de altera√ß√µes reais:")
        
        response = requests.post(
            'http://localhost:8000/api/produtos/verificar-alteracoes-precos',
            json={'dias': 7}
        )
        
        if response.status_code == 200:
            data = response.json()
            
            alteracoes_detectadas = data.get('alteracoes_detectadas', False)
            produtos_afetados = data.get('produtos_afetados', [])
            
            print(f"   ‚úÖ API de verifica√ß√£o respondeu!")
            print(f"   üîç Altera√ß√µes detectadas: {alteracoes_detectadas}")
            print(f"   üìä Produtos afetados: {len(produtos_afetados)}")
            
            if produtos_afetados:
                print("   üì¶ Produtos encontrados:")
                for produto in produtos_afetados[:3]:
                    print(f"     - {produto['nome']}: R$ {produto['preco_atual']:.2f} ‚Üí R$ {produto['novo_preco']:.2f}")
        else:
            print(f"   ‚ùå Erro na API: {response.status_code}")
        
        # 6. Teste direto no banco - calcular impacto
        print("\n6. Teste direto do c√°lculo de impacto:")
        
        alteracoes_teste = {
            'materiais': [],
            'maquinas': [{
                'id': maquina['id'],
                'nome': maquina['nome'],
                'custo_por_hora': custo_novo,
                'custo_por_hora_anterior': custo_atual,
                'variacao_percentual': ((custo_novo - custo_atual) / custo_atual * 100)
            }]
        }
        
        resultado = db.calcular_impacto_alteracoes_precos(alteracoes_teste)
        
        print(f"   üìä Produtos afetados pelo c√°lculo direto: {len(resultado['produtos_afetados'])}")
        
        if resultado['produtos_afetados']:
            print("   üì¶ Detalhes dos produtos afetados:")
            for produto in resultado['produtos_afetados'][:3]:
                print(f"     - {produto['nome']}")
                print(f"       Pre√ßo: R$ {produto['preco_atual']:.2f} ‚Üí R$ {produto['novo_preco']:.2f}")
                print(f"       Varia√ß√£o: {produto['variacao_percentual']:.2f}%")
                print(f"       Causa: {produto['causa']}")
        else:
            print("   ‚ö†Ô∏è Nenhum produto foi detectado como afetado")
            print("   üîç Verificando poss√≠veis problemas:")
            
            # Debug: verificar se h√° produtos com varia√ß√£o mas abaixo do limiar
            for produto in produtos:
                # Calcular manualmente o que seria o novo custo
                if produto['tempo_estimado']:
                    tempo_horas = produto['tempo_estimado'].total_seconds() / 3600
                    custo_atual_etapa = float(produto['custo_estimado'] or 0)
                    custo_novo_etapa = custo_novo * tempo_horas
                    diferenca = custo_novo_etapa - custo_atual_etapa
                    
                    if abs(diferenca) > 0.01:  # Diferen√ßa maior que 1 centavo
                        print(f"     - {produto['nome']}: diferen√ßa de R$ {diferenca:.2f} na etapa")
        
        db.close()
        
    except Exception as e:
        print(f"‚ùå Erro durante teste: {str(e)}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    testar_deteccao_alteracao_maquina()
