#!/usr/bin/env python3
"""
Script simplificado para verificar por que o produto 61 aparece no modal
"""

from database import Database
from datetime import datetime, timedelta

def verificar_problema_produto_61():
    """Verifica especificamente por que o produto 61 est√° aparecendo no modal"""
    
    print("üîç DIAGN√ìSTICO: Por que produto 61 aparece no modal?")
    print("=" * 60)
    
    db = Database()
    
    try:
        # 1. Buscar o produto
        produto = db.buscar_produto_por_id(61)
        print(f"üì¶ Produto: {produto['nome']}")
        print(f"   Pre√ßo atual: R$ {produto['preco']}")
        print()
        
        # 2. Verificar altera√ß√µes detectadas pelo sistema
        alteracoes = db.verificar_alteracoes_custos(7)
        print(f"üîç Altera√ß√µes detectadas nos √∫ltimos 7 dias:")
        print(f"   Materiais: {len(alteracoes.get('materiais', []))}")
        print(f"   M√°quinas: {len(alteracoes.get('maquinas', []))}")
        print()
        
        # 3. Listar m√°quinas alteradas
        if alteracoes and alteracoes.get('maquinas'):
            print("‚öôÔ∏è M√°quinas detectadas como alteradas:")
            for maq in alteracoes['maquinas']:
                print(f"   - {maq['nome']} (ID: {maq['id']})")
                
                # Verificar quando foi alterada
                db.cursor.execute("""
                    SELECT data_atualizacao, hora_maquina 
                    FROM maquinas 
                    WHERE id = %s
                """, (maq['id'],))
                info = db.cursor.fetchone()
                print(f"     √öltima atualiza√ß√£o: {info['data_atualizacao']}")
                print(f"     Custo/hora atual: R$ {info['hora_maquina']}")
            print()
        
        # 4. Verificar se o produto usa essas m√°quinas
        print("üîó Verificando se produto 61 usa essas m√°quinas:")
        db.cursor.execute("""
            SELECT pe.*, m.nome as maquina_nome, m.hora_maquina
            FROM produtos_etapas pe
            JOIN maquinas m ON pe.equipamento_id = m.id AND pe.equipamento_tipo = 'maquina'
            WHERE pe.produto_id = 61
        """, ())
        
        etapas_maquinas = db.cursor.fetchall()
        
        if etapas_maquinas:
            print("   ‚úÖ SIM, o produto usa m√°quinas:")
            for etapa in etapas_maquinas:
                print(f"     - Etapa: {etapa['nome']}")
                print(f"       M√°quina: {etapa['maquina_nome']} (ID: {etapa['equipamento_id']})")
                print(f"       Tempo: {etapa['tempo_estimado']} horas")
                print(f"       Custo registrado: R$ {etapa['custo_estimado']}")
                print(f"       Custo atual da m√°quina: R$ {etapa['hora_maquina']}/hora")
                
                # Calcular se h√° diferen√ßa real
                if etapa['tempo_estimado'] and etapa['hora_maquina']:
                    # Converter timedelta para horas
                    tempo_horas = etapa['tempo_estimado'].total_seconds() / 3600
                    custo_atual = float(etapa['hora_maquina']) * tempo_horas
                    custo_registrado = float(etapa['custo_estimado'] or 0)
                    diferenca = custo_atual - custo_registrado
                    print(f"       Tempo em horas: {tempo_horas:.4f}")
                    print(f"       Custo atual calculado: R$ {custo_atual:.2f}")
                    print(f"       Diferen√ßa: R$ {diferenca:.2f}")
                    
                    if abs(diferenca) < 0.01:
                        print(f"       ‚úÖ SEM DIFEREN√áA REAL!")
                    else:
                        print(f"       üö® DIFEREN√áA REAL ENCONTRADA!")
                print()
        else:
            print("   ‚ùå N√ÉO, o produto n√£o usa m√°quinas")
        
        # 5. Calcular impacto real
        print("üí∞ Calculando impacto real no pre√ßo:")
        
        if alteracoes:
            resultado = db.calcular_impacto_alteracoes_precos(alteracoes)
            produtos_afetados = resultado.get('produtos_afetados', [])
            
            produto_encontrado = None
            for prod in produtos_afetados:
                if prod['id'] == 61:
                    produto_encontrado = prod
                    break
            
            if produto_encontrado:
                print(f"   üéØ Produto 61 FOI INCLU√çDO:")
                print(f"     Pre√ßo atual: R$ {produto_encontrado['preco_atual']}")
                print(f"     Novo pre√ßo: R$ {produto_encontrado['novo_preco']}")
                print(f"     Varia√ß√£o: {produto_encontrado['variacao_percentual']:.6f}%")
                print(f"     Diferen√ßa: R$ {produto_encontrado['diferenca']}")
                
                # AQUI EST√Å O PROBLEMA!
                if abs(produto_encontrado['variacao_percentual']) < 1.0:
                    print(f"   ‚ùå PROBLEMA IDENTIFICADO:")
                    print(f"      Varia√ß√£o {produto_encontrado['variacao_percentual']:.6f}% < 1%")
                    print(f"      MAS o produto foi inclu√≠do mesmo assim!")
                    print(f"      CAUSA: O filtro no backend N√ÉO est√° funcionando!")
                else:
                    print(f"   ‚úÖ Varia√ß√£o >= 1%, inclus√£o justificada")
            else:
                print(f"   ‚úÖ Produto 61 N√ÉO foi inclu√≠do (correto)")
        
        # 6. Verificar por que a data_atualizacao das m√°quinas √© recente
        print("\nüïê Verificando por que m√°quinas t√™m data_atualizacao recente:")
        
        if alteracoes and alteracoes.get('maquinas'):
            for maq in alteracoes['maquinas']:
                print(f"   M√°quina: {maq['nome']}")
                
                # Verificar hist√≥rico se existe
                db.cursor.execute("""
                    SELECT * FROM historico_custos_maquinas 
                    WHERE maquina_id = %s 
                    ORDER BY data_alteracao DESC 
                    LIMIT 3
                """, (maq['id'],))
                historico = db.cursor.fetchall()
                
                if historico:
                    print(f"     Hist√≥rico de altera√ß√µes:")
                    for h in historico:
                        print(f"       {h['data_alteracao']}: R$ {h['custo_anterior']} ‚Üí R$ {h['custo_novo']}")
                else:
                    print(f"     Sem hist√≥rico de altera√ß√µes registrado")
                    print(f"     PROV√ÅVEL CAUSA: M√°quina foi criada/editada recentemente")
                    print(f"     mas o custo n√£o mudou realmente")
    
    except Exception as e:
        print(f"‚ùå Erro: {e}")
        import traceback
        traceback.print_exc()
    finally:
        db.close()

if __name__ == "__main__":
    verificar_problema_produto_61()
