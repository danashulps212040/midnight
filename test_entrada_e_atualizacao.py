#!/usr/bin/env python3
"""
Script para criar uma nova entrada de estoque e testar a atualiza√ß√£o de pre√ßos
"""

from database import Database
import requests
import json

def main():
    print("=== TESTE: CRIANDO ENTRADA DE ESTOQUE E TESTANDO ATUALIZA√á√ÉO ===\n")
    
    try:
        db = Database()
        
        # 1. Verificar material existente (papel A4)
        print("1. Verificando material existente:")
        db.cursor.execute("SELECT id, nome, custo_atual FROM itens_estoque WHERE nome LIKE '%papel%'")
        materiais = db.cursor.fetchall()
        
        if not materiais:
            print("‚ùå Nenhum material encontrado!")
            return
        
        material = materiais[0]
        print(f"   üìã Material: {material['nome']} (ID: {material['id']})")
        print(f"   üí∞ Custo atual: R$ {material['custo_atual'] or 0:.2f}")
        
        # 2. Criar nova entrada com custo diferente
        novo_custo = 32.50
        print(f"\n2. Criando entrada de estoque com custo R$ {novo_custo:.2f}:")
        
        resultado = db.criar_entrada_estoque(
            item_id=material['id'],
            quantidade=50,
            data_entrada='2025-07-02',
            fornecedor='Fornecedor Teste',
            nota_fiscal='NF-12345',
            custo_unitario=novo_custo,
            data_validade=None,
            lote='LOTE-TEST',
            localizacao='Estoque A',
            observacoes='Teste de atualiza√ß√£o de pre√ßos'
        )
        
        if 'sucesso' in resultado:
            print(f"   ‚úÖ Entrada criada com sucesso! ID: {resultado['id']}")
        else:
            print(f"   ‚ùå Erro ao criar entrada: {resultado}")
            return
        
        # 3. Verificar se o custo foi atualizado
        print("\n3. Verificando se o custo foi atualizado:")
        db.cursor.execute("SELECT custo_atual FROM itens_estoque WHERE id = %s", (material['id'],))
        custo_atualizado = db.cursor.fetchone()
        print(f"   üí∞ Novo custo atual: R$ {custo_atualizado['custo_atual'] or 0:.2f}")
        
        # 4. Verificar altera√ß√µes de pre√ßos
        print("\n4. Verificando altera√ß√µes de pre√ßos:")
        response = requests.post(
            'http://localhost:5000/api/produtos/verificar-alteracoes-precos',
            json={},
            headers={'Content-Type': 'application/json'}
        )
        
        if response.status_code == 200:
            data = response.json()
            produtos_afetados = data.get('produtos_afetados', [])
            
            if produtos_afetados:
                produto_teste = produtos_afetados[0]
                print(f"   ‚úÖ Altera√ß√£o detectada!")
                print(f"   üì¶ Produto: {produto_teste['nome']}")
                print(f"   üí∞ Pre√ßo atual: R$ {produto_teste['preco_atual']:.2f}")
                print(f"   üí∞ Novo pre√ßo: R$ {produto_teste['novo_preco']:.2f}")
                print(f"   üìà Varia√ß√£o: {produto_teste['variacao_percentual']:.2f}%")
                
                # 5. Verificar produto antes da atualiza√ß√£o
                print("\n5. Verificando produto antes da atualiza√ß√£o:")
                produto_query = """
                    SELECT p.id, p.nome, p.preco, p.custo_materiais, p.custo_etapas,
                           pm.material_id, pm.custo_unitario, pm.subtotal, pm.quantidade_necessaria
                    FROM produtos p
                    LEFT JOIN produtos_materiais pm ON p.id = pm.produto_id
                    WHERE p.id = %s
                """
                
                db.cursor.execute(produto_query, (produto_teste['id'],))
                dados_antes = db.cursor.fetchall()
                produto_antes = dados_antes[0]
                
                print(f"   üì¶ Produto: {produto_antes['nome']}")
                print(f"   üí∞ Pre√ßo: R$ {produto_antes['preco']:.2f}")
                print(f"   üîß Custo materiais: R$ {produto_antes['custo_materiais'] or 0:.2f}")
                print(f"   üìã Custo unit√°rio produtos_materiais: R$ {produto_antes['custo_unitario'] or 0:.2f}")
                print(f"   üìã Subtotal produtos_materiais: R$ {produto_antes['subtotal'] or 0:.2f}")
                
                # 6. Aplicar atualiza√ß√£o
                print("\n6. Aplicando atualiza√ß√£o de pre√ßos:")
                update_data = {
                    'produtos': [{
                        'id': produto_teste['id'],
                        'novo_preco': produto_teste['novo_preco'],
                        'preco_anterior': produto_teste['preco_atual']
                    }]
                }
                
                response = requests.post(
                    'http://localhost:5000/api/precos/atualizar',
                    json=update_data,
                    headers={'Content-Type': 'application/json'}
                )
                
                if response.status_code == 200:
                    result = response.json()
                    if result.get('status') == 'success':
                        print(f"   ‚úÖ Atualiza√ß√£o aplicada com sucesso!")
                        
                        # 7. Verificar produto ap√≥s a atualiza√ß√£o
                        print("\n7. Verificando produto ap√≥s a atualiza√ß√£o:")
                        db.cursor.execute(produto_query, (produto_teste['id'],))
                        dados_depois = db.cursor.fetchall()
                        produto_depois = dados_depois[0]
                        
                        print(f"   üì¶ Produto: {produto_depois['nome']}")
                        print(f"   üí∞ Pre√ßo: R$ {produto_depois['preco']:.2f}")
                        print(f"   üîß Custo materiais: R$ {produto_depois['custo_materiais'] or 0:.2f}")
                        print(f"   üìã Custo unit√°rio produtos_materiais: R$ {produto_depois['custo_unitario'] or 0:.2f}")
                        print(f"   üìã Subtotal produtos_materiais: R$ {produto_depois['subtotal'] or 0:.2f}")
                        
                        # 8. Comparar os valores
                        print("\n8. Resultado da atualiza√ß√£o:")
                        if produto_antes['custo_materiais'] != produto_depois['custo_materiais']:
                            print(f"   ‚úÖ Custo de materiais foi atualizado: R$ {produto_antes['custo_materiais'] or 0:.2f} ‚Üí R$ {produto_depois['custo_materiais'] or 0:.2f}")
                        else:
                            print(f"   ‚ö†Ô∏è  Custo de materiais n√£o foi alterado: R$ {produto_antes['custo_materiais'] or 0:.2f}")
                        
                        if produto_antes['custo_unitario'] != produto_depois['custo_unitario']:
                            print(f"   ‚úÖ Custo unit√°rio foi atualizado: R$ {produto_antes['custo_unitario'] or 0:.2f} ‚Üí R$ {produto_depois['custo_unitario'] or 0:.2f}")
                        else:
                            print(f"   ‚ö†Ô∏è  Custo unit√°rio n√£o foi alterado: R$ {produto_antes['custo_unitario'] or 0:.2f}")
                        
                        if produto_antes['subtotal'] != produto_depois['subtotal']:
                            print(f"   ‚úÖ Subtotal foi atualizado: R$ {produto_antes['subtotal'] or 0:.2f} ‚Üí R$ {produto_depois['subtotal'] or 0:.2f}")
                        else:
                            print(f"   ‚ö†Ô∏è  Subtotal n√£o foi alterado: R$ {produto_antes['subtotal'] or 0:.2f}")
                    else:
                        print(f"   ‚ùå Erro na atualiza√ß√£o: {result.get('message', 'Erro desconhecido')}")
                else:
                    print(f"   ‚ùå Erro HTTP na atualiza√ß√£o: {response.status_code}")
            else:
                print("   ‚ÑπÔ∏è  Nenhuma altera√ß√£o de pre√ßo detectada")
        else:
            print(f"   ‚ùå Erro ao verificar altera√ß√µes: {response.status_code}")
        
        db.close()
        
    except Exception as e:
        print(f"‚ùå Erro durante o teste: {str(e)}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()
