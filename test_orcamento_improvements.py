#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Script de teste para verificar as melhorias implementadas no sistema de or√ßamentos:

1. Nova coluna data_hora_entrega no banco de dados
2. Campo de desconto mostrando valor em formato monet√°rio brasileiro
3. Dropdown de parcelas com estilo CSS consistente
4. Parcelas mostrando valor individual de cada parcela

Para executar: python test_orcamento_improvements.py
"""

import mysql.connector
from datetime import datetime, date
import sys
import os

# Adicionar o diret√≥rio do projeto ao path para importar database.py
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def test_database_column():
    """Testa se a coluna data_hora_entrega foi criada corretamente"""
    print("üîç Testando estrutura do banco de dados...")
    
    try:
        conn = mysql.connector.connect(
            host='localhost',
            user='root',
            password='',  # Substitua pela sua senha
            database='midnight'
        )
        
        cursor = conn.cursor()
        
        # Verificar se a coluna existe
        cursor.execute("DESCRIBE orcamentos")
        columns = cursor.fetchall()
        
        has_data_hora_entrega = False
        for column in columns:
            if column[0] == 'data_hora_entrega':
                has_data_hora_entrega = True
                print(f"‚úÖ Coluna 'data_hora_entrega' encontrada: {column[1]} {column[2]}")
                break
        
        if not has_data_hora_entrega:
            print("‚ùå Coluna 'data_hora_entrega' n√£o encontrada!")
            return False
        
        # Testar inser√ß√£o de dados
        print("\nüìù Testando inser√ß√£o de dados com data_hora_entrega...")
        
        test_query = """
            INSERT INTO orcamentos (
                numero, data_orcamento, cliente_id, vendedor_id, 
                prazo_entrega, data_hora_entrega, valor_total, status
            ) VALUES (%s, %s, %s, %s, %s, %s, %s, %s)
        """
        
        test_data = (
            'TEST001',
            date.today(),
            1,  # cliente_id (assumindo que existe)
            1,  # vendedor_id (assumindo que existe)
            '15 dias',
            datetime(2025, 8, 15, 14, 30),  # Data e hora de entrega
            1000.00,
            'Teste'
        )
        
        cursor.execute(test_query, test_data)
        test_id = cursor.lastrowid
        
        # Verificar se foi inserido corretamente
        cursor.execute("SELECT numero, data_hora_entrega FROM orcamentos WHERE id = %s", (test_id,))
        result = cursor.fetchone()
        
        if result:
            print(f"‚úÖ Teste de inser√ß√£o bem-sucedido: {result[0]} - {result[1]}")
            
            # Limpar dados de teste
            cursor.execute("DELETE FROM orcamentos WHERE id = %s", (test_id,))
            conn.commit()
            print("üßπ Dados de teste removidos")
        else:
            print("‚ùå Falha na inser√ß√£o de teste")
            return False
        
        cursor.close()
        conn.close()
        
        print("‚úÖ Teste de banco de dados conclu√≠do com sucesso!")
        return True
        
    except mysql.connector.Error as e:
        print(f"‚ùå Erro de conex√£o com o banco: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Erro no teste: {e}")
        return False

def test_html_structure():
    """Verifica se as altera√ß√µes HTML foram aplicadas corretamente"""
    print("\nüîç Testando estrutura HTML...")
    
    try:
        with open('templates/orcamentos.html', 'r', encoding='utf-8') as f:
            content = f.read()
        
        # Verificar se o dropdown de parcelas foi alterado
        if '<div class="dropdown custom-select" tabindex="0" role="button" id="parcelas">' in content:
            print("‚úÖ Dropdown de parcelas convertido para custom-select")
        else:
            print("‚ùå Dropdown de parcelas ainda est√° como <select>")
            return False
        
        # Verificar se a fun√ß√£o atualizarTextoParcelas existe
        if 'function atualizarTextoParcelas()' in content:
            print("‚úÖ Fun√ß√£o atualizarTextoParcelas() encontrada")
        else:
            print("‚ùå Fun√ß√£o atualizarTextoParcelas() n√£o encontrada")
            return False
        
        # Verificar se o desconto mostra valor monet√°rio
        if 'R$ ${valorDesconto.toFixed(2).replace(\'.\', \',\')}' in content:
            print("‚úÖ Desconto configurado para mostrar valor monet√°rio")
        else:
            print("‚ùå Desconto n√£o est√° mostrando valor monet√°rio")
            return False
        
        # Verificar se a data/hora de entrega est√° sendo coletada
        if 'data_entrega: dataEntrega || null' in content:
            print("‚úÖ Data/hora de entrega sendo coletada no formul√°rio")
        else:
            print("‚ùå Data/hora de entrega n√£o est√° sendo coletada")
            return False
        
        print("‚úÖ Estrutura HTML verificada com sucesso!")
        return True
        
    except FileNotFoundError:
        print("‚ùå Arquivo templates/orcamentos.html n√£o encontrado")
        return False
    except Exception as e:
        print(f"‚ùå Erro ao verificar HTML: {e}")
        return False

def test_flask_backend():
    """Verifica se as altera√ß√µes no backend Flask foram aplicadas"""
    print("\nüîç Testando backend Flask...")
    
    try:
        with open('flask_gui.py', 'r', encoding='utf-8') as f:
            content = f.read()
        
        # Verificar se data_hora_entrega est√° sendo processada
        if 'data_hora_entrega = data.get(\'data_entrega\')' in content:
            print("‚úÖ Backend coletando data_hora_entrega")
        else:
            print("‚ùå Backend n√£o est√° coletando data_hora_entrega")
            return False
        
        # Verificar se est√° sendo inclu√≠da no orcamento_data
        if '\'data_hora_entrega\': data_hora_entrega_obj' in content:
            print("‚úÖ data_hora_entrega inclu√≠da nos dados do or√ßamento")
        else:
            print("‚ùå data_hora_entrega n√£o inclu√≠da nos dados do or√ßamento")
            return False
        
        # Verificar se o processamento de datetime est√° correto
        if 'datetime.strptime(data_hora_entrega, \'%Y-%m-%dT%H:%M\')' in content:
            print("‚úÖ Processamento de datetime-local configurado corretamente")
        else:
            print("‚ùå Processamento de datetime-local n√£o encontrado")
            return False
        
        print("‚úÖ Backend Flask verificado com sucesso!")
        return True
        
    except FileNotFoundError:
        print("‚ùå Arquivo flask_gui.py n√£o encontrado")
        return False
    except Exception as e:
        print(f"‚ùå Erro ao verificar backend: {e}")
        return False

def main():
    """Executa todos os testes"""
    print("üöÄ Iniciando testes das melhorias do sistema de or√ßamentos\n")
    print("=" * 60)
    
    tests_passed = 0
    total_tests = 3
    
    # Teste 1: Estrutura do banco de dados
    if test_database_column():
        tests_passed += 1
    
    # Teste 2: Estrutura HTML
    if test_html_structure():
        tests_passed += 1
    
    # Teste 3: Backend Flask
    if test_flask_backend():
        tests_passed += 1
    
    print("\n" + "=" * 60)
    print(f"üìä Resultado dos testes: {tests_passed}/{total_tests} passaram")
    
    if tests_passed == total_tests:
        print("üéâ Todas as melhorias foram implementadas com sucesso!")
        print("\nüìã Resumo das melhorias implementadas:")
        print("  1. ‚úÖ Nova coluna 'data_hora_entrega' criada no banco")
        print("  2. ‚úÖ Campo de desconto mostra valor em R$ brasileiro")
        print("  3. ‚úÖ Dropdown de parcelas com estilo CSS consistente")
        print("  4. ‚úÖ Parcelas mostram valor individual (ex: 2x de R$ 50,00)")
        print("  5. ‚úÖ Backend processa data/hora de entrega corretamente")
    else:
        print("‚ö†Ô∏è  Algumas melhorias precisam de ajustes adicionais")
    
    return tests_passed == total_tests

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
